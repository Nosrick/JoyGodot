[gd_resource type="VisualShader" load_steps=7 format=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "happiness"

[sub_resource type="VisualShaderNodeVectorFunc" id=2]
output_port_for_preview = 0
function = 4

[sub_resource type="VisualShaderNodeVectorFunc" id=3]
output_port_for_preview = 0
function = 5

[sub_resource type="VisualShaderNodeExpression" id=4]
size = Vector2( 428.936, 215.4 )
expression = "hsvOutput = hsvInput;
hsvOutput.g = hsvOutput.g = saturation;"

[sub_resource type="VisualShaderNodeScalarClamp" id=5]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeInput" id=6]
output_port_for_preview = 0
input_name = "color"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform float happiness;



void vertex() {
// Output:0

}

void fragment() {
// Input:9
	vec3 n_out9p0 = COLOR.rgb;

// VectorFunc:16
	vec3 n_out16p0;
	{
		vec3 c = n_out9p0;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		n_out16p0 = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

// ScalarUniform:11
	float n_out11p0 = happiness;

// ScalarClamp:6
	float n_in6p1 = 0.00000;
	float n_in6p2 = 1.00000;
	float n_out6p0 = clamp(n_out11p0, n_in6p1, n_in6p2);

// Expression:20
	vec3 n_out20p0;
	n_out20p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out20p0 = n_out16p0;
		n_out20p0.g = n_out20p0.g = n_out6p0;
	}

// VectorFunc:17
	vec3 n_out17p0;
	{
		vec3 c = n_out20p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out17p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	ALBEDO = n_out17p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -438, 68 )
nodes/fragment/0/position = Vector2( 920, 120 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -100, 340 )
nodes/fragment/9/node = SubResource( 6 )
nodes/fragment/9/position = Vector2( -340, 100 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( -340, 440 )
nodes/fragment/16/node = SubResource( 2 )
nodes/fragment/16/position = Vector2( -120, 120 )
nodes/fragment/17/node = SubResource( 3 )
nodes/fragment/17/position = Vector2( 640, 120 )
nodes/fragment/20/node = SubResource( 4 )
nodes/fragment/20/position = Vector2( 100, 120 )
nodes/fragment/20/size = Vector2( 428.936, 215.4 )
nodes/fragment/20/input_ports = "0,1,hsvInput;1,0,saturation;"
nodes/fragment/20/output_ports = "0,1,hsvOutput;"
nodes/fragment/20/expression = "hsvOutput = hsvInput;
hsvOutput.g = hsvOutput.g = saturation;"
nodes/fragment/connections = PoolIntArray( 11, 0, 6, 0, 16, 0, 20, 0, 6, 0, 20, 1, 9, 0, 16, 0, 20, 0, 17, 0, 17, 0, 0, 0 )
