[gd_resource type="VisualShader" load_steps=8 format=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "happiness"

[sub_resource type="VisualShaderNodeExpression" id=2]
size = Vector2( 517, 317 )
expression = "hsvOutput = hsvInput;
hsvOutput.g = saturation;

float luma = dot(hsvInput, vec3(0.2126729, 0.7151522, 0.0721750));
hsvOutput =  luma + saturation * (hsvInput - luma);"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=4]
output_port_for_preview = 0
source = 5
texture_type = 1

[sub_resource type="VisualShaderNodeVectorOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "modulate_color"

[sub_resource type="VisualShaderNodeScalarFunc" id=7]
function = 18

[resource]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float happiness;



void vertex() {
// Output:0

}

void fragment() {
// Input:19

// Texture:20
	vec3 n_out20p0;
	float n_out20p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, UV.xy);
		n_out20p0 = TEXTURE_tex_read.rgb;
		n_out20p1 = TEXTURE_tex_read.a;
	}

// Input:23
	vec3 n_out23p0 = MODULATE.rgb;

// VectorOp:22
	vec3 n_out22p0 = n_out20p0 * n_out23p0;

// ScalarUniform:11
	float n_out11p0 = happiness;

// ScalarFunc:24
	float n_out24p0 = min(max(n_out11p0, 0.0), 1.0);

// Expression:18
	vec3 n_out18p0;
	n_out18p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out18p0 = n_out22p0;
		n_out18p0.g = n_out24p0;
		
		float luma = dot(n_out22p0, vec3(0.2126729, 0.7151522, 0.0721750));
		n_out18p0 =  luma + n_out24p0 * (n_out22p0 - luma);
	}

// Output:0
	COLOR.rgb = n_out18p0;
	COLOR.a = n_out20p1;

}

void light() {
// Output:0

}
"
mode = 1
flags/light_only = false
flags/unshaded = true
nodes/fragment/0/position = Vector2( -400, -140 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( -1500, 260 )
nodes/fragment/18/node = SubResource( 2 )
nodes/fragment/18/position = Vector2( -980, 60 )
nodes/fragment/18/size = Vector2( 517, 317 )
nodes/fragment/18/input_ports = "0,1,hsvInput;1,0,saturation;"
nodes/fragment/18/output_ports = "0,1,hsvOutput;"
nodes/fragment/18/expression = "hsvOutput = hsvInput;
hsvOutput.g = saturation;

float luma = dot(hsvInput, vec3(0.2126729, 0.7151522, 0.0721750));
hsvOutput =  luma + saturation * (hsvInput - luma);"
nodes/fragment/19/node = SubResource( 3 )
nodes/fragment/19/position = Vector2( -1660, -240 )
nodes/fragment/20/node = SubResource( 4 )
nodes/fragment/20/position = Vector2( -1460, -300 )
nodes/fragment/22/node = SubResource( 5 )
nodes/fragment/22/position = Vector2( -1220, 60 )
nodes/fragment/23/node = SubResource( 6 )
nodes/fragment/23/position = Vector2( -1520, 60 )
nodes/fragment/24/node = SubResource( 7 )
nodes/fragment/24/position = Vector2( -1240, 260 )
nodes/fragment/connections = PoolIntArray( 19, 0, 20, 2, 20, 1, 0, 1, 20, 0, 22, 0, 23, 0, 22, 1, 19, 0, 20, 2, 20, 1, 0, 1, 20, 0, 22, 0, 23, 0, 22, 1, 11, 0, 24, 0, 24, 0, 18, 1, 18, 0, 0, 0, 22, 0, 18, 0 )
