[gd_resource type="VisualShader" load_steps=15 format=2]

[sub_resource type="VisualShaderNodeVectorInterp" id=1]

[sub_resource type="VisualShaderNodeScalarConstant" id=2]
constant = 32.0

[sub_resource type="VisualShaderNodeScalarConstant" id=3]

[sub_resource type="VisualShaderNodeExpression" id=4]
size = Vector2( 697, 579 )
expression = "if(light > maximumLight || light < minimumLight)
{
	alpha = 1f;
}
else if(light > maximumComfort)
{
	alpha = smoothstep(maximumComfort, maximumLight, light);
}
else if(light < minimumComfort)
{
	alpha = smoothstep(minimumComfort, minimumLight, light);
}
else
{
	alpha = 0f;
}"

[sub_resource type="VisualShaderNodeBooleanUniform" id=5]
uniform_name = "canSee"

[sub_resource type="VisualShaderNodeExpression" id=6]
size = Vector2( 507, 407 )
expression = "if(canSee == true)
{
	outputColour = mixedColour;
	alphaOut = alphaIn;
}
else
{
	outputColour = darkColour;
	alphaOut = 1f;
}"

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=7]

[sub_resource type="VisualShaderNodeColorUniform" id=8]
uniform_name = "darkColour"

[sub_resource type="VisualShaderNodeColorUniform" id=9]
uniform_name = "lightColour"

[sub_resource type="VisualShaderNodeScalarUniform" id=10]
uniform_name = "lightLevel"

[sub_resource type="VisualShaderNodeScalarUniform" id=11]
uniform_name = "minimumComfort"

[sub_resource type="VisualShaderNodeScalarUniform" id=12]
uniform_name = "maximumComfort"

[sub_resource type="VisualShaderNodeScalarUniform" id=13]
uniform_name = "minimumLight"

[sub_resource type="VisualShaderNodeScalarUniform" id=14]
uniform_name = "maximumLight"

[resource]
code = "shader_type canvas_item;
uniform bool canSee;
uniform vec4 darkColour : hint_color;
uniform vec4 lightColour : hint_color;
uniform float minimumComfort;
uniform float maximumComfort;
uniform float lightLevel;
uniform float minimumLight;
uniform float maximumLight;



void vertex() {
// Output:0

}

void fragment() {
// BooleanUniform:16
	bool n_out16p0 = canSee;

// ColorUniform:2
	vec3 n_out2p0 = darkColour.rgb;
	float n_out2p1 = darkColour.a;

// ColorUniform:3
	vec3 n_out3p0 = lightColour.rgb;
	float n_out3p1 = lightColour.a;

// ScalarUniform:6
	float n_out6p0 = minimumComfort;

// ScalarUniform:7
	float n_out7p0 = maximumComfort;

// ScalarUniform:4
	float n_out4p0 = lightLevel;

// ScalarSmoothStep:19
	float n_out19p0 = smoothstep(n_out6p0, n_out7p0, n_out4p0);

// VectorMix:12
	vec3 n_out12p0 = mix(n_out2p0, n_out3p0, vec3(n_out19p0));

// ScalarUniform:8
	float n_out8p0 = minimumLight;

// ScalarUniform:9
	float n_out9p0 = maximumLight;

// Expression:15
	float n_out15p0;
	n_out15p0 = 0.0;
	{
		if(n_out4p0 > n_out9p0 || n_out4p0 < n_out8p0)
		{
			n_out15p0 = 1f;
		}
		else if(n_out4p0 > n_out7p0)
		{
			n_out15p0 = smoothstep(n_out7p0, n_out9p0, n_out4p0);
		}
		else if(n_out4p0 < n_out6p0)
		{
			n_out15p0 = smoothstep(n_out6p0, n_out8p0, n_out4p0);
		}
		else
		{
			n_out15p0 = 0f;
		}
	}

// Expression:17
	vec3 n_out17p0;
	float n_out17p1;
	n_out17p0 = vec3(0.0, 0.0, 0.0);
	n_out17p1 = 0.0;
	{
		if(n_out16p0 == true)
		{
			n_out17p0 = n_out12p0;
			n_out17p1 = n_out15p0;
		}
		else
		{
			n_out17p0 = n_out2p0;
			n_out17p1 = 1f;
		}
	}

// Output:0
	COLOR.rgb = n_out17p0;
	COLOR.a = n_out17p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1305.44, -94.75 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 8 )
nodes/fragment/2/position = Vector2( -1100, -360 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -1100, -240 )
nodes/fragment/4/node = SubResource( 10 )
nodes/fragment/4/position = Vector2( -1540, 440 )
nodes/fragment/6/node = SubResource( 11 )
nodes/fragment/6/position = Vector2( -1600, 180 )
nodes/fragment/7/node = SubResource( 12 )
nodes/fragment/7/position = Vector2( -1600, 260 )
nodes/fragment/8/node = SubResource( 13 )
nodes/fragment/8/position = Vector2( -1600, 100 )
nodes/fragment/9/node = SubResource( 14 )
nodes/fragment/9/position = Vector2( -1600, 340 )
nodes/fragment/12/node = SubResource( 1 )
nodes/fragment/12/position = Vector2( -740, -340 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( -1420, -440 )
nodes/fragment/14/node = SubResource( 3 )
nodes/fragment/14/position = Vector2( -1420, -520 )
nodes/fragment/15/node = SubResource( 4 )
nodes/fragment/15/position = Vector2( -1220, 100 )
nodes/fragment/15/size = Vector2( 697, 579 )
nodes/fragment/15/input_ports = "0,0,minimumLight;1,0,minimumComfort;2,0,maximumComfort;3,0,maximumLight;4,0,light;"
nodes/fragment/15/output_ports = "0,0,alpha;"
nodes/fragment/15/expression = "if(light > maximumLight || light < minimumLight)
{
	alpha = 1f;
}
else if(light > maximumComfort)
{
	alpha = smoothstep(maximumComfort, maximumLight, light);
}
else if(light < minimumComfort)
{
	alpha = smoothstep(minimumComfort, minimumLight, light);
}
else
{
	alpha = 0f;
}"
nodes/fragment/16/node = SubResource( 5 )
nodes/fragment/16/position = Vector2( -820, -40 )
nodes/fragment/17/node = SubResource( 6 )
nodes/fragment/17/position = Vector2( -440, -60 )
nodes/fragment/17/size = Vector2( 507, 407 )
nodes/fragment/17/input_ports = "0,2,canSee;1,1,mixedColour;2,1,darkColour;3,0,alphaIn;"
nodes/fragment/17/output_ports = "0,1,outputColour;1,0,alphaOut;"
nodes/fragment/17/expression = "if(canSee == true)
{
	outputColour = mixedColour;
	alphaOut = alphaIn;
}
else
{
	outputColour = darkColour;
	alphaOut = 1f;
}"
nodes/fragment/19/node = SubResource( 7 )
nodes/fragment/19/position = Vector2( -1100, -520 )
nodes/fragment/connections = PoolIntArray( 2, 0, 12, 0, 3, 0, 12, 1, 4, 0, 15, 4, 9, 0, 15, 3, 7, 0, 15, 2, 6, 0, 15, 1, 8, 0, 15, 0, 16, 0, 17, 0, 12, 0, 17, 1, 2, 0, 17, 2, 17, 0, 0, 0, 17, 1, 0, 1, 15, 0, 17, 3, 4, 0, 19, 2, 19, 0, 12, 2, 6, 0, 19, 0, 7, 0, 19, 1 )
